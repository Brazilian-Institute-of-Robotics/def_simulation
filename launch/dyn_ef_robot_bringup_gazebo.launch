<launch>
    <!-- Launch Gazebo -->
    <!-- these are the arguments you can pass this launch file, for example paused:=true -->
    <arg name="paused" default="false"/>
    <arg name="use_sim_time" default="true"/>
    <arg name="gui" default="true"/>
    <arg name="headless" default="false"/>
    <arg name="debug" default="false"/>

    <!-- We resume the logic in our own world -->
    <include file="$(find dynamic_end_effector)/launch/launch_our_world.launch">
        <arg name="debug" value="$(arg debug)" />
        <arg name="gui" value="$(arg gui)" />
        <arg name="paused" value="$(arg paused)"/>
        <arg name="use_sim_time" value="$(arg use_sim_time)"/>
        <arg name="headless" value="$(arg headless)"/>
    </include>

    <!-- Load the URDF into the ROS Parameter Server -->
    <param name="robot_description" command="$(find xacro)/xacro '$(find dynamic_end_effector)/urdf/dynamic-ef.urdf.xacro' --inorder" />

    <!-- Run a python script to the send a service call to gazebo_ros to spawn a URDF robot -->
    <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen" args="-urdf -model dyn_ef_robot -param robot_description"/>

    <!-- ros_control seven dof arm launch file -->
    <!-- Load joint controller configurations from YAML file to parameter server -->
    <rosparam file="$(find dynamic_end_effector)/config/robotic_arm_control.yaml" command="load"/>
    <!-- <rosparam file="$(find dynamic_end_effector)/config/robotic_arm_gazebo_joint_states.yaml" command="load"/> -->

    <node name="joint_controller_spawner" pkg="controller_manager" type="spawner" respawn="false" output="screen" ns="/dyn_ef_robot" args="joint_state_controller" />

    <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher">
        <param name="/use_gui" value="false"/>
        <rosparam param="/source_list">[/dyn_ef_robot/joint_states]</rosparam>
    </node>

    <!-- convert joint states to TF transforms for rviz, etc -->
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="false" output="screen">
    </node>

    <!-- ros_control trajectory control dof arm launch file -->
    <rosparam file="$(find dynamic_end_effector)/config/trajectory_control.yaml" command="load"/>

    <node name="dyn_ef_robot_controller_spawner" pkg="controller_manager" type="spawner" respawn="false" output="screen" ns="/dyn_ef_robot" args="dyn_ef_robot_controller"/>

</launch>


